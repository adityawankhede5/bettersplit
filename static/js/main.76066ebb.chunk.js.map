{"version":3,"sources":["styles/home.module.css","styles/main.module.css","styles/editbill.module.css","components/Header.js","components/NewBillForm.js","components/PeopleView.js","components/ItemView.js","components/BillView.js","components/AllBills.js","components/Home.js","components/PairedInput.js","components/ItemForm.js","components/EditBill.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Navbar","dark","color","to","NavbarBrand","NewBillForm","props","useState","existingPeople","setExistingPeople","people","setPeople","newPerson","setNewPerson","personNameInvalidError","setPersonNameInvalidError","newBill","setNewBill","billNameInvalidError","setBillNameInvalidError","useEffect","name","id","peopleNew","existingPeopleNew","allPeople","Object","values","i","push","isIncluded","Fragment","Form","onSubmit","event","preventDefault","trim","includes","newPeopleState","map","person","uniqid","newExistingPeopleState","FormGroup","InputGroup","Input","autoFocus","type","placeholder","value","onChange","e","target","invalid","InputGroupAddon","addonType","Button","FormText","Badge","style","margin","fontSize","onClick","index","togglePersonState","key","involvedPeople","length","createNewBill","PeopleView","selected","setSelected","console","log","Container","ListGroup","ListGroupItem","active","toggle","className","pill","Number","paid","owes","toFixed","Collapse","isOpen","Table","hover","colSpan","items","paidByMe","item","paidForMe","ItemView","setItems","itemsNew","price","paidFor","paidBy","BillView","bill","isBillShown","setIsBillShown","isLoading","setIsLoading","isInvalid","setIsInvalid","activeTab","setActiveTab","Modal","centered","ModalHeader","ModalBody","maxHeight","overflowY","Spinner","navBar","borderBottom","TabContent","TabPane","tabId","details","AllBills","bills","setBills","billID","setBillID","Date","date","toDateString","marginRight","width","height","viewBox","fill","xmlns","fillRule","d","getPeople","size","Home","isModalOpen","setIsModalOpen","toggleModal","wrapper","tab","billName","peopleInvolved","personID","billId","toISOString","brief","obj","getPeopleAsObject","billsNew","PairedInput","flag","splitEqually","toggleSplitEqually","updateValue","rem","max","Col","xs","overflowX","maxWidth","whiteSpace","min","step","disabled","ItemForm","addItem","itemName","setItemName","itemAmount","setItemAmount","setPaidFor","paidForRem","setPaidForRem","paidForError","setPaidForError","setPaidBy","paidByRem","setPaidByRem","paidByError","setPaidByError","itemNameError","setItemNameError","itemAmountError","setItemAmountError","slice","totalPaid","reduce","acc","unequalPaid","splitInto","Row","noGutters","isError","Math","abs","filter","textAlign","isNaN","peopleArray","paidForNew","paidByNew","EditBill","useParams","setBill","toggleTab","table","billNew","removeItem","Main","meID","basename","appWrapper","path","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.76066ebb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"home_wrapper__2zyis\",\"navBar\":\"home_navBar__9Abb4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"main_wrapper__2I1e6\",\"appWrapper\":\"main_appWrapper__KMG1a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"editbill_wrapper__6YZYh\",\"navBar\":\"editbill_navBar__nWqcY\"};","import React from 'react'\nimport { Navbar, NavbarBrand } from 'reactstrap'\nimport { Link } from 'react-router-dom'\n\nfunction Header() {\n    return (\n        <div>\n            <Navbar dark color=\"dark\">\n                <Link to=\"/\"><NavbarBrand>BetterSplit</NavbarBrand></Link>\n            </Navbar>\n        </div>\n    )\n}\n\nexport default Header\n","import React, { useState, useEffect } from 'react'\nimport { Form, FormGroup, InputGroup, Input, InputGroupAddon, Button, Badge, FormText } from 'reactstrap'\nimport uniqid from 'uniqid';\n\nfunction NewBillForm(props) {\n    const [existingPeople, setExistingPeople] = useState([]);\n    const [people, setPeople] = useState([]);\n    const [newPerson, setNewPerson] = useState('');\n    const [personNameInvalidError, setPersonNameInvalidError] = useState(\"\")\n    const [newBill, setNewBill] = useState('');\n    const [billNameInvalidError, setBillNameInvalidError] = useState(\"\");\n\n    function handleAddNewPerson(event) {\n        event.preventDefault();\n        const name = newPerson.trim();\n        if (name === \"\") setPersonNameInvalidError(\"Cannot be empty\")\n        else if (existingPeople.includes(name)) setPersonNameInvalidError(\"Already exists. Select from below\")\n        else {\n            setPersonNameInvalidError(\"\");\n\n            const newPeopleState = people.map(person => person);\n            newPeopleState.push({id: uniqid(), name: name, isIncluded: true });\n            setPeople(newPeopleState);\n\n            const newExistingPeopleState = existingPeople.map(person => person);\n            newExistingPeopleState.push(name);\n            setExistingPeople(newExistingPeopleState)\n\n            setNewPerson(\"\");\n        }\n    }\n\n    function handleCreateNewBill(event) {\n        event.preventDefault();\n        setBillNameInvalidError(\"\");\n        const name = newBill.trim();\n        if (name === \"\") setBillNameInvalidError(\"Cannot be empty\")\n        else {\n            setBillNameInvalidError(\"\");\n            const involvedPeople = [];\n            for (const i in people) {\n                if (people[i].isIncluded) involvedPeople.push({id: people[i].id, name: people[i].name});\n            }\n            // console.log(involvedPeople);\n            if(involvedPeople.length === 0) {\n                setBillNameInvalidError(\"Must select atleast one person\");\n                return;\n            }\n            props.createNewBill(newBill, involvedPeople);\n            setNewBill(\"\")\n        }\n    }\n\n\n    function togglePersonState(index) {\n        const peopleNew = people.map(person => person);\n        peopleNew[index].isIncluded = !peopleNew[index].isIncluded;\n        setPeople(peopleNew);\n    }\n\n    useEffect(() => {\n        const peopleNew = [];\n        const existingPeopleNew = [];\n        const allPeople = Object.values(props.people);\n        let name, id;\n        for(const i in allPeople){\n            id = allPeople[i].id;\n            name = allPeople[i].name;\n            existingPeopleNew.push(name);\n            peopleNew.push({id, name, isIncluded: false});\n        }\n        setExistingPeople(existingPeopleNew);\n        setPeople(peopleNew);\n    }, [props.people]);\n\n    return (\n        <React.Fragment>\n            <Form onSubmit={handleAddNewPerson}>\n                <FormGroup>\n                    <InputGroup>\n                        <Input autoFocus type=\"text\" placeholder=\"Person Name\"\n                            value={newPerson}\n                            onChange={(e) => { setNewPerson(e.target.value) }}\n                            invalid={personNameInvalidError !== \"\"}\n                        />\n                        <InputGroupAddon addonType=\"append\">\n                            <Button type=\"submit\" color=\"dark\">Add</Button>\n                        </InputGroupAddon>\n                    </InputGroup>\n                    <FormText color={\"danger\"}>{personNameInvalidError}</FormText>\n                </FormGroup>\n            </Form>\n            <hr />\n            <React.Fragment>\n                {\n                    people.map((person, i) => {\n                        return (\n                            <Badge style={{ margin: '2px', fontSize: 'large' }}\n                                color={person.isIncluded ? 'success' : 'secondary'}\n                                onClick={() => { togglePersonState(i) }}\n                                key={person.name}\n                            >{person.name}</Badge>\n                        )\n                    })\n                }\n            </React.Fragment>\n            <hr />\n            <Form onSubmit={handleCreateNewBill}>\n                <FormGroup>\n                    <InputGroup>\n                        <Input type=\"text\" placeholder=\"Bill Name/Purpose/Place\"\n                            value={newBill}\n                            onChange={(e) => { setNewBill(e.target.value) }}\n                            invalid={billNameInvalidError !== \"\"}\n                        />\n                        <InputGroupAddon addonType=\"append\">\n                            <Button type=\"submit\" color=\"primary\">Create</Button>\n                        </InputGroupAddon>\n                    </InputGroup>\n                    <FormText color={\"danger\"}>{billNameInvalidError}</FormText>\n                </FormGroup>\n            </Form>\n        </React.Fragment>\n    )\n}\n\nexport default NewBillForm\n","import React, { useState, useEffect } from 'react'\nimport { Container, ListGroup, ListGroupItem, Collapse, Table, Badge } from 'reactstrap';\n\nfunction PeopleView(props) {\n    const [people, setPeople] = useState([]);\n    const [selected, setSelected] = useState(null);\n\n    const toggle = (i) => {\n        if(selected === i) setSelected(null);\n        else setSelected(i);\n    }\n    useEffect(()=>{\n        const peopleNew = Object.values(props.people);\n        setPeople(peopleNew);\n        console.log(peopleNew)\n    }, [props.people])\n    return (\n        <Container>\n            <ListGroup>\n                {people.map((person, i) => {\n                    return <React.Fragment key={person.name}>\n                        <ListGroupItem active={selected===i} onClick={()=>{toggle(i)}} className=\"justify-content-between\">\n                            {person.name} <Badge pill color={selected === i ? 'light' : 'dark'}>{(Number(person.paid)-Number(person.owes)).toFixed(2)}</Badge>\n                        </ListGroupItem>\n                        <Collapse isOpen={selected === i}>\n                            <Table hover className=\"border\">\n                                <tbody>\n                                    <tr><td colSpan=\"2\" className=\"bg-light\"><strong>Paid {person.paid}</strong></td></tr>\n                                    {person.items.paidByMe.map((item, i) => {\n                                        return <tr key={item.name + i}>\n                                            <td>{item.name}</td>\n                                            <td>{item.value}</td>\n                                        </tr>\n                                    })}\n                                    <tr><td colSpan=\"2\" className=\"bg-light\"><strong>Owes {person.owes}</strong></td></tr>\n                                    {person.items.paidForMe.map((item, i) => {\n                                        return <tr key={item.name + i}>\n                                            <td>{item.name}</td>\n                                            <td>{item.value}</td>\n                                        </tr>\n                                    })}\n                                </tbody>\n                            </Table>\n                        </Collapse>\n                    </React.Fragment>\n                })}\n            </ListGroup>\n        </Container>\n    )\n}\n\nexport default PeopleView\n","import React, { useEffect, useState } from 'react'\nimport { Container, Table, ListGroup, ListGroupItem, Badge, Collapse } from 'reactstrap';\n\nfunction ItemView(props) {\n    const [items, setItems] = useState([]);\n    const [selected, setSelected] = useState(null);\n    const toggle = (i) => {\n        if(selected===i) setSelected(null);\n        else setSelected(i);\n    }\n    useEffect(()=>{\n        const itemsNew = Object.values(props.items);\n        setItems(itemsNew);\n        console.log(itemsNew)\n    }, [props.items])\n    \n    return (\n        <Container>\n            <ListGroup>\n                {items.map((item, i) => {\n                    return <React.Fragment key={item.name + i}>\n                        <ListGroupItem active={selected===i} onClick={()=>{toggle(i)}} className=\"justify-content-between\">\n                            {item.name} <Badge color={selected === i ? 'light' : 'dark'} pill>{item.price}</Badge>\n                        </ListGroupItem>\n                        <Collapse isOpen={selected===i}>\n                            <Table hover className=\"border\">\n                                <tbody>\n                                    <tr><td colSpan=\"2\" className=\"bg-light\"><strong>Paid For</strong></td></tr>\n                                    {item.paidFor.map((person) => {\n                                        return <tr key={person.name}>\n                                            <td>{person.name}</td>\n                                            <td>{person.value}</td>\n                                        </tr>\n                                    })}\n                                    <tr><td colSpan=\"2\" className=\"bg-light\"><strong>Paid By</strong></td></tr>\n                                    {item.paidBy.map((person) => {\n                                        return <tr key={person.name}>\n                                            <td>{person.name}</td>\n                                            <td>{person.value}</td>\n                                        </tr>\n                                    })}\n                                </tbody>\n                            </Table>\n                        </Collapse>\n                    </React.Fragment>\n                })}\n            </ListGroup>\n        </Container>\n    )\n    \n}\n\nexport default ItemView\n","import React, { useState, useEffect } from 'react'\nimport { Modal, ModalHeader, ModalBody, Spinner, TabContent, TabPane } from 'reactstrap';\nimport {navBar} from '../styles/home.module.css';\nimport PeopleView from './PeopleView';\nimport ItemView from './ItemView';\n\n\nfunction BillView({bill, isBillShown, setIsBillShown}) {\n    const [isLoading, setIsLoading] = useState(true);\n    const [isInvalid, setIsInvalid] = useState(false);\n    const [activeTab, setActiveTab] = useState(\"1\");\n\n\n    useEffect(()=>{\n        setIsLoading(false);\n        if(!bill) {\n            setIsInvalid(true);\n            return;\n        }\n        setIsInvalid(false);\n        console.log(\"Use Effect\", bill)\n    }, [bill])\n    \n    return (\n        <Modal centered isOpen={isBillShown} toggle={()=>{setIsBillShown(!isBillShown)}}>\n            <ModalHeader toggle={()=>{setIsBillShown(!isBillShown)}} >\n                {\n                    isLoading ? \"Loading...\" :\n                        isInvalid ? \"Invalid Bill\" : bill.name\n                            \n                }\n            </ModalHeader>\n            <ModalBody style={{maxHeight: '80vh', overflowY: 'auto'}}>\n                {\n                    isLoading ? <Spinner /> :\n                        isInvalid ? \"Error 404 bill not found\" : \n                            (\n                                <React.Fragment>\n                                <nav className={`${navBar}`}>\n                                    <div className=\"navItem\" onClick={()=>{setActiveTab(\"1\")}}\n                                        style={activeTab === \"1\" ? {borderBottom: '2px solid var(--primary)', color: 'var(--primary)'}: {}}\n                                    >People\n                                    </div>\n                                    <div className=\"navItem\" onClick={()=>{setActiveTab(\"2\")}}\n                                        style={activeTab === \"2\" ? {borderBottom: '2px solid var(--primary)', color: 'var(--primary)'}: {}}\n                                    >Items\n                                    </div>\n                                </nav>\n                                <TabContent activeTab={activeTab}>\n                                    <TabPane tabId={\"1\"}>\n                                        <PeopleView people={bill.details.people} />\n                                    </TabPane>  \n                                    <TabPane tabId={\"2\"}>\n                                        <ItemView items={bill.details.items} />\n                                    </TabPane>\n                                </TabContent>\n                                </React.Fragment>\n                            )\n                            \n                }\n            </ModalBody>\n        </Modal>\n    )\n}\n\nexport default BillView","import React, { useEffect, useState } from 'react'\nimport { Badge, Button, ListGroup, ListGroupItem, Collapse, Table } from 'reactstrap'\nimport { Link } from 'react-router-dom';\nimport BillView from './BillView';\n\nfunction AllBills(props) {\n\n    const [bills, setBills] = useState([]);\n    const [isBillShown, setIsBillShown] = useState(false);\n    const [billID, setBillID] = useState(null);\n    const [selected, setSelected] = useState(null);\n\n    const showBill = (id) => {\n        setBillID(id);\n        setIsBillShown(true);\n    }\n    const toggle = (i) => {\n        if(selected===i) setSelected(null);\n        else setSelected(i);\n    }\n    const getPeople = (bill) => {\n        const people = Object.values(bill.details.people);\n        return people.map((person)=>{\n            return <Badge style={{fontSize: 'small', margin: '2px'}} color=\"info\" key={person.name}>{person.name}</Badge>\n        })\n    }\n\n    useEffect(()=>{\n        setBills(Object.values(props.bills));\n    }, [props.bills])\n\n    return (\n        <React.Fragment>\n            <BillView bill={bills[billID]} isBillShown={isBillShown} setIsBillShown={setIsBillShown} />\n            <ListGroup>\n                {\n                    bills.map((bill, i) => {\n                        return <React.Fragment>\n                            <ListGroupItem active={selected === i} onClick={()=>{toggle(i)}}>\n                                <div>{bill.name} <Badge pill color={selected === i ? 'light' : 'dark'}>0</Badge></div>\n                                <div style={{fontSize: 'smaller'}}>{new Date(bill.date).toDateString()}</div>\n                            </ListGroupItem>\n                            <Collapse isOpen={selected === i}>\n                                <Table hover className=\"border\">\n                                    <tr>\n                                        <td>\n                                            <div><strong>0</strong></div>\n                                            <div className=\"text-secondary\" style={{fontSize: 'small'}}>paid by me</div>\n                                        </td>\n                                        <td>\n                                            <div><strong>0</strong></div>\n                                            <div className=\"text-secondary\" style={{fontSize: 'small'}}>paid for me</div>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td colSpan={2}>\n                                            <span style={{fontSize: 'x-large', marginRight: '5px'}}>\n                                                <svg className=\"bi bi-people\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                                                    <path fillRule=\"evenodd\" d=\"M15 14s1 0 1-1-1-4-5-4-5 3-5 4 1 1 1 1h8zm-7.995-.944v-.002.002zM7.022 13h7.956a.274.274 0 0 0 .014-.002l.008-.002c-.002-.264-.167-1.03-.76-1.72C13.688 10.629 12.718 10 11 10c-1.717 0-2.687.63-3.24 1.276-.593.69-.759 1.457-.76 1.72a1.05 1.05 0 0 0 .022.004zm7.973.056v-.002.002zM11 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4zm3-2a3 3 0 1 1-6 0 3 3 0 0 1 6 0zM6.936 9.28a5.88 5.88 0 0 0-1.23-.247A7.35 7.35 0 0 0 5 9c-4 0-5 3-5 4 0 .667.333 1 1 1h4.216A2.238 2.238 0 0 1 5 13c0-1.01.377-2.042 1.09-2.904.243-.294.526-.569.846-.816zM4.92 10c-1.668.02-2.615.64-3.16 1.276C1.163 11.97 1 12.739 1 13h3c0-1.045.323-2.086.92-3zM1.5 5.5a3 3 0 1 1 6 0 3 3 0 0 1-6 0zm3-2a2 2 0 1 0 0 4 2 2 0 0 0 0-4z\"/>\n                                                </svg>\n                                            </span>\n                                            {getPeople(bill)}\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td colSpan={2}>\n                                            <Button className=\"m-1\" size=\"sm\" color=\"primary\" onClick={()=>{showBill(i)}}>\n                                                <svg className=\"bi bi-eye\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                                                    <path fillRule=\"evenodd\" d=\"M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8zM1.173 8a13.134 13.134 0 0 0 1.66 2.043C4.12 11.332 5.88 12.5 8 12.5c2.12 0 3.879-1.168 5.168-2.457A13.134 13.134 0 0 0 14.828 8a13.133 13.133 0 0 0-1.66-2.043C11.879 4.668 10.119 3.5 8 3.5c-2.12 0-3.879 1.168-5.168 2.457A13.133 13.133 0 0 0 1.172 8z\"/>\n                                                    <path fillRule=\"evenodd\" d=\"M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0z\"/>\n                                                </svg>\n                                                {\" \"}\n                                                View\n                                            </Button>\n                                            <Link to={\"/\"+bill.id}>\n                                            <Button className=\"m-1\" size=\"sm\" color=\"success\">\n                                                <svg className=\"bi bi-pencil\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                                                    <path fillRule=\"evenodd\" d=\"M11.293 1.293a1 1 0 0 1 1.414 0l2 2a1 1 0 0 1 0 1.414l-9 9a1 1 0 0 1-.39.242l-3 1a1 1 0 0 1-1.266-1.265l1-3a1 1 0 0 1 .242-.391l9-9zM12 2l2 2-9 9-3 1 1-3 9-9z\"/>\n                                                    <path fillRule=\"evenodd\" d=\"M12.146 6.354l-2.5-2.5.708-.708 2.5 2.5-.707.708zM3 10v.5a.5.5 0 0 0 .5.5H4v.5a.5.5 0 0 0 .5.5H5v.5a.5.5 0 0 0 .5.5H6v-1.5a.5.5 0 0 0-.5-.5H5v-.5a.5.5 0 0 0-.5-.5H3z\"/>\n                                                </svg>\n                                                {\" \"}\n                                                Edit\n                                            </Button>\n                                            </Link>\n                                        </td>\n                                    </tr>\n                                </Table>\n                            </Collapse>\n                        </React.Fragment>\n                    })\n                }\n            </ListGroup>\n        </React.Fragment>\n    )\n}\n\nexport default AllBills\n","import React, { useState } from 'react'\nimport { Button, TabContent, TabPane, Badge, Container, Modal, ModalHeader, ModalBody} from 'reactstrap'\nimport {wrapper, navBar} from '../styles/home.module.css';\nimport NewBillForm from './NewBillForm';\nimport uniqid from 'uniqid'\nimport AllBills from './AllBills';\n\nfunction Home({people, setPeople, bills, setBills}) {\n    // STATES RELATED TO UI\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [activeTab, setActiveTab] = useState(\"1\");\n\n    const toggleModal = () => {\n        setIsModalOpen(!isModalOpen);\n    }\n\n    const toggleTab = (tab) => {\n        if(activeTab !== tab) setActiveTab(tab);\n    }\n\n\n    const createNewBill = (billName, peopleInvolved) => {\n        // HIDE THE FORM\n        setIsModalOpen(false);\n        console.log(peopleInvolved)\n        \n        const billId = uniqid();\n        \n        // ADDING PEOPLE\n        const peopleNew = {...people};\n        let personID;\n        for(const i in peopleInvolved) {\n            personID = peopleInvolved[i].id;\n            if(peopleNew[personID]){\n                peopleNew[personID].bills.push({id: billId, name: billName});\n            }else{\n                peopleNew[personID] = {\n                    id: personID,\n                    name: peopleInvolved[i].name,\n                    paid: 0,\n                    owes: 0,\n                    bills: [{id: billId, name: billName}]\n                }\n                // peopleMapNew.set(peopleInvolved[i], personId);\n            }\n        }\n        console.log(\"People\", peopleNew);\n        // setPeopleMap(peopleMapNew);\n        setPeople(peopleNew);\n\n        // ADDING BILL\n        const getPeopleAsObject = () => {\n            let obj = {};\n            let personID;\n            for(const i in peopleInvolved){\n                personID = peopleInvolved[i].id;\n                obj = {\n                    ...obj,\n                    [personID]: {\n                        id: personID,\n                        name: peopleInvolved[i].name,\n                        paid: 0,\n                        owes: 0,\n                        items: {\n                            paidByMe: [],\n                            paidForMe: [],\n                        }\n                    }\n                }\n            }\n            return obj;\n        }\n\n        const bill = {\n            id: billId,\n            name: billName,\n            date: new Date().toISOString(),\n            brief: {\n                paid: 0,\n                owes: 0,\n            },\n            details: {\n                items: {},\n                people: getPeopleAsObject()\n            },\n        }\n        // billMapNew.set(billName, billId);\n        const billsNew = {...bills, [billId]: bill};\n        console.log(\"Bills\", billsNew);\n        // console.log(\"Bill Map:\", billMapNew)\n        // setBillMap(billMapNew);\n        setBills(billsNew);\n    }\n\n    return (\n        <div className={`${wrapper}`}>\n            <div>\n                <nav className={`${navBar}`}>\n                    <div className=\"navItem\" onClick={()=>{toggleTab(\"1\")}}\n                        style={activeTab === \"1\" ? {borderBottom: '2px solid var(--primary)', color: 'var(--primary)'}: {}}\n                    >Bills <Badge color={activeTab === \"1\" ? 'primary': 'secondary'}>{0}</Badge>\n                    </div>\n                </nav>\n                <Modal isOpen={isModalOpen} toggle={toggleModal} centered>\n                    <ModalHeader toggle={toggleModal}>New Bill</ModalHeader>\n                    <ModalBody>\n                        <NewBillForm createNewBill={createNewBill}  people={people} />\n                    </ModalBody>\n                </Modal>\n            </div>\n            <div>\n                <TabContent activeTab={activeTab}>\n                    <TabPane tabId={\"1\"}>\n                        <Container>\n                            <AllBills bills={bills}  />\n                        </Container>\n                    </TabPane>\n                </TabContent>\n            </div>\n            <div>\n                <Button color=\"primary\" onClick={toggleModal} className=\"btn-block\">Add Bill</Button>\n            </div>\n        </div>\n    )\n}\n\nexport default Home\n","import React from 'react'\nimport { InputGroup, InputGroupAddon, Input, Button, Col } from 'reactstrap';\n\nfunction PairedInput({flag, splitEqually, toggleSplitEqually, name, index, value, updateValue, rem, max}) {\n    return (\n            <Col xs={6} className=\"p-1\" >\n                <InputGroup  size={\"sm\"}>\n                    <InputGroupAddon addonType=\"append\">\n                        <Button color={splitEqually ? 'primary' : 'secondary'} onClick={()=>{toggleSplitEqually(index, flag)}}>\n                            <div style={{overflowX: 'auto', maxWidth: '16vw', whiteSpace: 'nowrap'}}>{name}</div>\n                        </Button>\n                    </InputGroupAddon>\n                    <Input type=\"number\" placeholder={Number(rem).toFixed(2)}\n                        min={0}\n                        step=\"any\"\n                        disabled={splitEqually}\n                        value={value}\n                        onChange={(e)=>{updateValue(index, e.target.value, flag)}}\n                    />\n                </InputGroup>\n            </Col>        \n    )\n}\n\nexport default PairedInput\n","import React, { useState } from 'react';\nimport uniqid from 'uniqid'\nimport { Form, FormGroup, InputGroup, Input, Button, FormText, Row, Col, Modal, ModalHeader, ModalBody, Container } from 'reactstrap';\nimport PairedInput from './PairedInput';\n\nfunction ItemForm({bill, addItem}) {\n    // STATES RELATED TO DATA\n    const [itemName, setItemName] = useState('');\n    const [itemAmount, setItemAmount] = useState('');\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [paidFor, setPaidFor] = useState([]);\n    const [paidForRem, setPaidForRem] = useState('');\n    const [paidForError, setPaidForError] = useState(\"\")\n    const [paidBy, setPaidBy] = useState([]);\n    const [paidByRem, setPaidByRem] = useState('')\n    const [paidByError, setPaidByError] = useState(\"\")\n\n    // STATES RELATED TO UI\n    const [itemNameError, setItemNameError] = useState('')\n    const [itemAmountError, setItemAmountError] = useState('')\n    \n    const handleItemNameSubmission = (event) => {\n        event.preventDefault();\n        const name = itemName.trim();\n        if(name===\"\"){ \n            setItemNameError(\"Cannot be empty\");\n            return;\n        }\n        setItemNameError(\"\");\n\n        if(itemAmount===\"\"){\n            setItemAmountError(\"Number required.\");\n            return;\n        }else if(isNaN(itemAmount)){\n            setItemAmountError(\"Must be a number\");\n            return;\n        }\n        setItemAmountError(\"\");\n        \n        const peopleArray = Object.values(bill.details.people);\n        \n        const paidForNew = peopleArray.map(({id, name}) => {\n            return {\n                id,\n                name,\n                value: \"\",\n                splitEqually: false\n            }\n        })\n        const paidByNew = peopleArray.map(({id, name}) => {\n            return {\n                id,\n                name,\n                value: \"\",\n                splitEqually: false\n            }\n        })\n        setPaidFor(paidForNew);\n        setPaidForRem(Number(itemAmount).toFixed());\n        setPaidBy(paidByNew);\n        setPaidByRem(Number(itemAmount).toFixed());\n\n        setIsModalOpen(true);\n    }\n\n    const updateValue = (i, value, flag) => {\n        let people;\n        if(flag) people = paidFor.slice();\n        else people = paidBy.slice();\n\n        people[i].value = value;\n        const totalPaid = people.reduce((acc, person) => acc + Number(person.value), 0)\n\n        if(flag){\n            setPaidForRem(Number(itemAmount)-totalPaid);\n            setPaidFor(people);\n        } \n        else{\n            setPaidByRem(Number(itemAmount)-totalPaid);\n            setPaidBy(people);\n        }\n    }\n\n    const toggleSplitEqually = (i, flag) => {\n        let people;\n        if(flag) people = paidFor.slice();\n        else people = paidBy.slice();\n\n        people[i].splitEqually = !people[i].splitEqually;\n        people[i].value = \"\";\n        let unequalPaid = 0;\n        let splitInto = 0;\n        for(const i in people){\n            if(people[i].splitEqually) ++splitInto;\n            else unequalPaid += Number(people[i].value);\n        }\n        let value = 0;\n        if(splitInto!==0) value = (Number(itemAmount)-unequalPaid)/splitInto;\n        value = value.toFixed(2);\n        \n        let totalPaid=0;\n        for(const i in people) {\n            if(people[i].splitEqually) people[i].value=value;\n            totalPaid += Number(people[i].value);\n        }\n        const rem = Number(itemAmount)-totalPaid;\n\n        if(flag){\n            setPaidFor(people)\n            setPaidForRem(rem);\n        }else{\n            setPaidBy(people)\n            setPaidByRem(rem);\n        }\n    }\n\n    const handleItemSplitSubmission = (event) => {\n        event.preventDefault();\n        let isError = false;\n        setPaidForError(\"\");\n        setPaidByError(\"\");\n        let rem = Number(paidForRem).toFixed(2);\n        if(Math.abs(rem)>=1){\n            isError = true;\n            setPaidForError(\"Remaining: \" + rem);\n        } \n        rem = Number(paidByRem).toFixed(2);\n        if(Math.abs(rem)>=1){\n            isError = true;\n            setPaidByError(\"Remaining: \" + rem);\n        } \n        \n        if(isError) return;\n\n        const item = {\n            id: uniqid(),\n            name: itemName,\n            price: Number(itemAmount).toFixed(2),\n            paidFor: paidFor.filter(person => person.value !== \"\"),\n            paidBy: paidBy.filter(person => person.value !== \"\"),\n        }\n\n        addItem(item);\n\n        // console.log(itemName, Number(itemAmount).toFixed(2));\n        // console.log(\"Paid For: \");\n        // console.table(paidFor.filter(person => person.value!==\"\"))\n        // console.log(\"Paid by\");\n        // console.table(paidBy.filter(person => person.value!==\"\"))\n\n        setIsModalOpen(false);\n        setItemName(\"\");\n        setItemAmount(\"\");\n\n    }\n    \n    return (\n        <div>\n            <Modal centered isOpen={isModalOpen} toggle={()=>{setIsModalOpen(!isModalOpen)}}>\n                <ModalHeader toggle={()=>{setIsModalOpen(!isModalOpen)}}>\n                    {/* ITEM DETAILS */}\n                    <Row noGutters>\n                        <Col className=\"col-auto p-1 overflow-auto border-right\" style={{maxWidth: '75vw'}}>{itemName}</Col>\n                        <Col className=\"col-auto p-1 overflow-auto\" style={{maxWidth: '75vw'}}>{Number(itemAmount).toFixed(2)}</Col>\n                    </Row>\n                </ModalHeader>\n                <ModalBody>\n                    <Container>\n                        <Form onSubmit={handleItemSplitSubmission}>\n                        {/* PAID FOR */}\n                        <Row>\n                            <Col style={{textAlign: 'center', color: 'var(--primary)', borderBottom: '2px solid var(--primary)'}} xs={12}>Paid For</Col>\n                        </Row>\n                        <Row className=\"my-1\" noGutters>\n                            {\n                                paidFor.map((person, i) => {\n                                    return <PairedInput \n                                        key={person.name}\n                                        flag={true}\n                                        splitEqually={person.splitEqually}\n                                        toggleSplitEqually={toggleSplitEqually}\n                                        name={person.name} \n                                        index={i}\n                                        value={person.value}\n                                        updateValue={updateValue}\n                                        rem={paidForRem}\n                                        />\n                                })\n                            }\n                            <Col xs={12}>\n                                <FormText color=\"danger\">{paidForError}</FormText>\n                            </Col>\n                        </Row>\n\n                        {/* PAID BY */}\n                        <Row>\n                            <Col style={{textAlign: 'center', color: 'var(--primary)', borderBottom: '2px solid var(--primary)'}} xs={12}>Paid By</Col>\n                        </Row>\n                        <Row  className=\"my-1\" noGutters>\n                            {\n                                paidBy.map((person, i) => {\n                                    return <PairedInput \n                                        key={person.name}\n                                        flag={false}\n                                        splitEqually={person.splitEqually}\n                                        toggleSplitEqually={toggleSplitEqually}\n                                        name={person.name} \n                                        index={i}\n                                        value={person.value}\n                                        updateValue={updateValue}\n                                        rem={paidByRem}\n                                        />\n                                })\n                            }\n                            <Col xs={12}>\n                                <FormText color=\"danger\">{paidByError}</FormText>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col className=\"d-flex justify-content-end\">\n                                <Button type=\"submit\" color=\"primary\">Add</Button>\n                            </Col>\n                        </Row>\n                        </Form>\n                    </Container>\n                </ModalBody>\n            </Modal>\n\n            <Form onSubmit={handleItemNameSubmission}>\n                <Row>\n                <Col>\n                    <FormGroup>\n                        <InputGroup>\n                            <Input type=\"text\" placeholder=\"Item Name\"\n                                value={itemName}\n                                invalid={itemNameError !== \"\"}\n                                onChange={(e)=>{setItemName(e.target.value)}} />\n                            <Input type=\"number\" placeholder=\"Amount\"\n                                value={itemAmount}\n                                step=\"any\"\n                                invalid={itemAmountError !== \"\"}\n                                onChange={(e)=>{setItemAmount(e.target.value)}} />\n                            <Button color=\"dark\" size=\"sm\" type=\"submit\" >Split</Button>\n                        </InputGroup>\n                        <Row>\n                            <Col xs={5}>\n                                <FormText color=\"danger\">{itemNameError}</FormText>\n                            </Col>\n                            <Col xs={5}>\n                                <FormText color=\"danger\">{itemAmountError}</FormText>                            \n                            </Col>\n                        </Row>\n                    </FormGroup>\n                </Col>\n                </Row>\n            </Form>\n        </div>\n    )\n}\n\nexport default ItemForm\n","import React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport ItemForm from './ItemForm';\nimport { Container, Row, Col, TabContent, TabPane, Spinner } from 'reactstrap';\nimport {wrapper, navBar} from '../styles/editbill.module.css';\nimport ItemView from './ItemView';\nimport PeopleView from './PeopleView';\n\nfunction EditBill({bills, setBills}) {\n    // DATA RELATED STATES\n    const {billID} = useParams();\n    const [bill, setBill] = useState(null);\n\n    // UI RELATED STATES\n    const [activeTab, setActiveTab] = useState(\"1\");\n\n    const toggleTab = (tab) => {\n        if(activeTab !== tab) setActiveTab(tab);\n    }\n\n    const addItem = ({id, name, price, paidFor, paidBy}) => {\n        const billNew = {...bill};\n        billNew.details.items = {\n            ...billNew.details.items,\n            [id]: {\n                id, name, price, paidFor, paidBy,\n            }\n        }\n        \n        let personID, paid, owes;\n        for(const i in paidFor){\n            personID = paidFor[i].id;\n            owes = billNew.details.people[personID].owes;\n            billNew.details.people[personID].items.paidForMe.push({id, name, value: paidFor[i].value})\n            billNew.details.people[personID].owes = (Number(owes) + Number(paidFor[i].value)).toFixed(2);\n        }\n        for(const i in paidBy){\n            personID = paidBy[i].id;\n            paid = billNew.details.people[personID].paid; \n            billNew.details.people[personID].items.paidByMe.push({id, name, value: paidBy[i].value})\n            billNew.details.people[personID].paid = (Number(paid)+ Number(paidBy[i].value)).toFixed(2)\n        }\n        console.log(\"Id \" + id, \"Name \" + name, \"Price \" + price);\n        console.table(paidFor);\n        console.table(paidBy);\n        console.log(\"New Bill\", billNew);\n        setBill(billNew);\n    }\n\n    const removeItem = (id) => {\n        if(!bill.details.items[id]) return;\n        const billNew = {...bill};\n        \n        const paidBy = billNew.details.items[id].paidBy;\n        const paidFor = billNew.details.items[id].paidFor;\n        let paid, owes, personID;\n        for(const i in paidBy) {\n            personID = paidBy[i].id;\n            paid = billNew.details.people[personID].paid; \n            billNew.details.people[personID].items.paidByMe = billNew.details.people[personID].items.paidByMe.filter((item) => item.id !== id);\n            billNew.details.people[personID].paid = (Number(paid) - Number(paidBy[i].value)).toFixed(2)\n        }\n\n        for(const i in paidFor) {\n            personID = paidFor[i].id;\n            owes = billNew.details.people[personID].owes; \n            billNew.details.people[personID].items.paidForMe = billNew.details.people[personID].items.paidForMe.filter((item) => item.id !== id);\n            billNew.details.people[personID].owes = (Number(owes) - Number(paidFor[i].value)).toFixed(2)\n        }\n\n        delete billNew.details.items[id];\n        setBill(billNew);\n\n    }\n\n    useEffect(()=>{\n        if(bills[billID]){\n            setBill(bills[billID])\n            // console.log(bills[billID]);\n        }else{\n            console.table({\"Invalid Bill\": bills[billID]})\n        }\n    }, [bills, billID]);\n\n    if(!bill) return <div className=\"fixedCenter\"><Spinner /></div>\n    else return (\n        <div className={`pt-2 ${wrapper}`}>\n            <div>\n                <Container>\n                    <Row>\n                        <Col>\n                            <ItemForm bill={bills[billID]} addItem={addItem} />\n                        </Col>\n                    </Row>\n                </Container>\n\n                <nav className={`${navBar}`}>\n                    <div className=\"navItem\" onClick={()=>{toggleTab(\"1\")}}\n                        style={activeTab === \"1\" ? {borderBottom: '2px solid var(--primary)', color: 'var(--primary)'}: {}}\n                    >People\n                    </div>\n                    <div className=\"navItem\" onClick={()=>{toggleTab(\"2\")}}\n                        style={activeTab === \"2\" ? {borderBottom: '2px solid var(--primary)', color: 'var(--primary)'}: {}}\n                    >Items\n                    </div>\n                </nav>\n            </div>\n            <div>\n                <TabContent activeTab={activeTab}>\n                    <TabPane tabId={\"1\"}>\n                        <PeopleView people={bill.details.people} />\n                    </TabPane>\n                    <TabPane tabId={\"2\"}>\n                        <ItemView items={bill.details.items} removeItem={removeItem} />\n                    </TabPane>\n                </TabContent>\n            </div>\n        </div>\n    )\n}\n\nexport default EditBill\n","import React, {useState} from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport uniqid from 'uniqid';\nimport {wrapper, appWrapper} from '../styles/main.module.css'\nimport Header from './Header'\nimport Home from './Home'\nimport EditBill from './EditBill';\n\nfunction Main() {\n    // STATES RELATED TO DATA\n    const meID = uniqid();\n    const [people, setPeople] = useState({\n        [meID]: {\n            id: meID,\n            name: \"me\",\n            paid: 0,\n            owes: 0,\n            bills: []\n        }\n    });\n    const [bills, setBills] = useState({});\n\n    return (\n        <Router basename=\"/bettersplit\">\n        <div className={`${wrapper}`}>\n            <Header />\n            <div className={`${appWrapper}`}>\n                {/* ROUTES */}\n                    <Switch>\n                        <Route path=\"/:billID\">\n                            <EditBill bills={bills} setBills={setBills} />\n                        </Route>\n                        <Route path=\"/\" >\n                            <Home people={people} \n                                setPeople={setPeople}\n                                bills={bills}\n                                setBills={setBills}\n                            />\n                        </Route>\n                    </Switch>\n            </div>\n        </div>\n        </Router>\n    )\n}\n\nexport default Main","import React from 'react';\nimport Main from './components/Main';\nimport './App.css'\n\nconst App = () => (\n  <div>\n    <Main />\n  </div>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}