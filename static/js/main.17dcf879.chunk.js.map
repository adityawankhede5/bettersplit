{"version":3,"sources":["styles/main.module.css","styles/home.module.css","components/Header.js","components/NewBillForm.js","components/Home.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Navbar","dark","color","NavbarBrand","href","NewBillForm","props","useState","existingPeople","setExistingPeople","people","setPeople","newPerson","setNewPerson","personNameInvalidError","setPersonNameInvalidError","newBill","setNewBill","billNameInvalidError","setBillNameInvalidError","useEffect","peopleNew","existingPeopleNew","keys","person","push","name","isIncluded","Fragment","Form","onSubmit","event","trim","preventDefault","includes","newPeopleState","map","newExistingPeopleState","FormGroup","InputGroup","Input","type","placeholder","value","onChange","e","target","invalid","InputGroupAddon","addonType","Button","FormText","i","Badge","style","margin","fontSize","onClick","index","togglePersonState","key","involvedPeople","createNewBill","Home","bills","setBills","Map","billMap","setBillMap","peopleMap","setPeopleMap","isModalOpen","setIsModalOpen","activeTab","setActiveTab","toggleModal","toggleTab","tab","className","wrapper","navBar","borderBottom","Modal","isOpen","toggle","centered","ModalHeader","ModalBody","billName","peopleInvolved","billId","uniqid","billMapNew","set","peopleMapNew","personId","has","get","billIds","paid","owes","console","log","bill","date","Date","toISOString","brief","details","items","obj","paidByMe","paidForMe","getPeopleAsObject","billsNew","TabContent","TabPane","tabId","Container","Main","appWrapper","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.17dcf879.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"main_wrapper__2I1e6\",\"appWrapper\":\"main_appWrapper__KMG1a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"home_wrapper__2zyis\",\"navBar\":\"home_navBar__9Abb4\"};","import React from 'react'\nimport { Navbar, NavbarBrand } from 'reactstrap'\n\nfunction Header() {\n    return (\n        <div>\n            <Navbar dark color=\"dark\">\n                <NavbarBrand href=\"/\">BetterSplit</NavbarBrand>\n            </Navbar>\n        </div>\n    )\n}\n\nexport default Header\n","import React, { useState, useEffect } from 'react'\nimport { Form, FormGroup, InputGroup, Input, InputGroupAddon, Button, Badge, FormText } from 'reactstrap'\n\nfunction NewBillForm(props) {\n    const [existingPeople, setExistingPeople] = useState([]);\n    const [people, setPeople] = useState([]);\n    const [newPerson, setNewPerson] = useState('');\n    const [personNameInvalidError, setPersonNameInvalidError] = useState(\"\")\n    const [newBill, setNewBill] = useState('');\n    const [billNameInvalidError, setBillNameInvalidError] = useState(\"\");\n\n    function handleAddNewPerson(event) {\n        const name = newPerson.trim();\n        event.preventDefault();\n        if (name === \"\") setPersonNameInvalidError(\"Cannot be empty\")\n        else if (existingPeople.includes(name)) setPersonNameInvalidError(\"Already exists. Select from below\")\n        else {\n            setPersonNameInvalidError(\"\");\n\n            const newPeopleState = people.map(person => person);\n            newPeopleState.push({ name: name, isIncluded: true });\n            setPeople(newPeopleState);\n\n            const newExistingPeopleState = existingPeople.map(person => person);\n            newExistingPeopleState.push(name);\n            setExistingPeople(newExistingPeopleState)\n\n            setNewPerson(\"\");\n        }\n    }\n\n    function handleCreateNewBill(event) {\n        event.preventDefault();\n        const name = newBill.trim();\n        if (name === \"\") setBillNameInvalidError(\"Cannot be empty\")\n        else {\n            setBillNameInvalidError(\"\");\n            const involvedPeople = [];\n            for (const person in people) {\n                if (people[person].isIncluded) involvedPeople.push(people[person].name);\n            }\n            // console.log(involvedPeople);\n            props.createNewBill(newBill, involvedPeople);\n            setNewBill(\"\")\n        }\n    }\n\n\n    function togglePersonState(index) {\n        const peopleNew = people.map(person => person);\n        peopleNew[index].isIncluded = !peopleNew[index].isIncluded;\n        setPeople(peopleNew);\n    }\n\n    useEffect(() => {\n        const peopleNew = [];\n        const existingPeopleNew = [];\n        for (const person of props.people.keys()) {\n            existingPeopleNew.push(person);\n            peopleNew.push({ name: person, isIncluded: false });\n        }\n        setExistingPeople(existingPeopleNew);\n        setPeople(peopleNew);\n    }, [props.people]);\n\n    return (\n        <React.Fragment>\n            <Form onSubmit={handleAddNewPerson}>\n                <FormGroup>\n                    <InputGroup>\n                        <Input type=\"text\" placeholder=\"Person Name\"\n                            value={newPerson}\n                            onChange={(e) => { setNewPerson(e.target.value) }}\n                            invalid={personNameInvalidError !== \"\"}\n                        />\n                        <InputGroupAddon addonType=\"append\">\n                            <Button type=\"submit\" color=\"dark\">Add</Button>\n                        </InputGroupAddon>\n                    </InputGroup>\n                    <FormText color={\"danger\"}>{personNameInvalidError}</FormText>\n                </FormGroup>\n            </Form>\n            <hr />\n            <React.Fragment>\n                {\n                    people.map((person, i) => {\n                        return (\n                            <Badge style={{ margin: '2px', fontSize: 'large' }}\n                                color={person.isIncluded ? 'success' : 'secondary'}\n                                onClick={() => { togglePersonState(i) }}\n                                key={person.name}\n                            >{person.name}</Badge>\n                        )\n                    })\n                }\n            </React.Fragment>\n            <hr />\n            <Form onSubmit={handleCreateNewBill}>\n                <FormGroup>\n                    <InputGroup>\n                        <Input type=\"text\" placeholder=\"Bill Name/Purpose/Place\"\n                            value={newBill}\n                            onChange={(e) => { setNewBill(e.target.value) }}\n                            invalid={billNameInvalidError !== \"\"}\n                        />\n                        <InputGroupAddon addonType=\"append\">\n                            <Button type=\"submit\" color=\"primary\">Create</Button>\n                        </InputGroupAddon>\n                    </InputGroup>\n                    <FormText color={\"danger\"}>{billNameInvalidError}</FormText>\n                </FormGroup>\n            </Form>\n        </React.Fragment>\n    )\n}\n\nexport default NewBillForm\n","import React, { useState } from 'react'\nimport { Button, TabContent, TabPane, Badge, Container, Modal, ModalHeader, ModalBody} from 'reactstrap'\nimport {wrapper, navBar} from '../styles/home.module.css';\nimport NewBillForm from './NewBillForm';\nimport uniqid from 'uniqid'\n\nfunction Home() {\n    // STATES RELATED TO DATA\n    const [people, setPeople] = useState({});\n    const [bills, setBills] = useState({});\n    const [billMap, setBillMap] = useState(new Map());\n    const [peopleMap, setPeopleMap] = useState(new Map());\n\n    // STATES RELATED TO UI\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [activeTab, setActiveTab] = useState(\"1\");\n\n    const toggleModal = () => {\n        setIsModalOpen(!isModalOpen);\n    }\n\n    const toggleTab = (tab) => {\n        if(activeTab !== tab) setActiveTab(tab);\n    }\n\n\n    const createNewBill = (billName, peopleInvolved) => {\n        // HIDE THE FORM\n        setIsModalOpen(false);\n        \n        const billId = uniqid();\n        const billMapNew = billMap;\n        billMap.set(billName, billId);\n        const peopleMapNew = peopleMap;\n        \n        // ADDING PEOPLE\n        let peopleNew = people;\n        for(const i in peopleInvolved) {\n            let personId;\n            if(peopleMapNew.has(peopleInvolved[i])){\n                personId = peopleMapNew.get(peopleInvolved[i]);\n                peopleNew[personId].billIds.push(billId)\n            }else{\n                personId = uniqid();\n                peopleNew[personId] = {\n                    name: peopleInvolved[i],\n                    paid: 0,\n                    owes: 0,\n                    billIds: [billId]\n                }\n                peopleMapNew.set(peopleInvolved[i], personId);\n            }\n        }\n        console.log(\"People\", peopleNew);\n        setPeopleMap(peopleMapNew);\n        setPeople(peopleNew);\n\n        // ADDING BILL\n        const getPeopleAsObject = () => {\n            let obj = {};\n            let personId;\n            for(const i in peopleInvolved){\n                personId = peopleMapNew.get(peopleInvolved[i])\n                obj = {\n                    ...obj,\n                    [personId]: {\n                        name: peopleInvolved[i],\n                        paid: 0,\n                        owes: 0,\n                        items: {\n                            paidByMe: [],\n                            paidForMe: [],\n                        }\n                    }\n                }\n            }\n            return obj;\n        }\n\n        const bill = {\n            name: billName,\n            date: new Date().toISOString(),\n            brief: {\n                paid: 0,\n                owes: 0,\n            },\n            details: {\n                items: {},\n                people: getPeopleAsObject()\n            },\n        }\n        billMapNew.set(billName, billId);\n        const billsNew = {...bills, [billId]: bill};\n        console.log(\"Bills\", billsNew);\n        setBillMap(billMapNew);\n        setBills(billsNew);\n    }\n\n    return (\n        <div className={`${wrapper}`}>\n            <div>\n                <nav className={`${navBar}`}>\n                    <div className=\"navItem\" onClick={()=>{toggleTab(\"1\")}}\n                        style={activeTab === \"1\" ? {borderBottom: '2px solid var(--primary)', color: 'var(--primary)'}: {}}\n                    >Bills <Badge color={activeTab === \"1\" ? 'primary': 'secondary'}>4</Badge>\n                    </div>\n                    <div className=\"navItem\" onClick={()=>{toggleTab(\"2\")}}\n                        style={activeTab === \"2\" ? {borderBottom: '2px solid var(--primary)', color: 'var(--primary)'}: {}}\n                    >People <Badge color={activeTab === \"2\" ? 'primary': 'secondary'}>10</Badge>\n                    </div>\n                </nav>\n                <Modal isOpen={isModalOpen} toggle={toggleModal} centered>\n                    <ModalHeader toggle={toggleModal}>New Bill</ModalHeader>\n                    <ModalBody>\n                        <NewBillForm createNewBill={createNewBill} people={peopleMap} />\n                    </ModalBody>\n                </Modal>\n            </div>\n            <div>\n                <TabContent activeTab={activeTab}>\n                    <TabPane tabId={\"1\"}>\n                        <Container>\n\n                        </Container>\n                    </TabPane>\n                    <TabPane tabId={\"2\"}>\n                        <Container>\n\n                        </Container>\n                    </TabPane>\n                </TabContent>\n            </div>\n            <div>\n                <Button color=\"primary\" onClick={toggleModal} className=\"btn-block\">Add Bill</Button>\n            </div>\n        </div>\n    )\n}\n\nexport default Home\n","import React from 'react'\nimport Header from './Header'\nimport {wrapper, appWrapper} from '../styles/main.module.css'\nimport Home from './Home'\n\nfunction Main() {\n    return (\n        <div className={`${wrapper}`}>\n            <Header />\n            <div className={`${appWrapper}`}>\n                {/* ROUTES */}\n                <Home />\n            </div>\n        </div>\n    )\n}\n\nexport default Main\n","import React from 'react';\nimport Main from './components/Main';\nimport './App.css'\n\nconst App = () => (\n  <div>\n    <Main />\n  </div>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}